{"version":2,"kind":"Notebook","sha256":"c624f18506770b63524a337d983124652e8104a0413e8c14de8139ddf38d6ed3","slug":"stack-dask-101","location":"/production/STACK/STACK-Dask-101.ipynb","dependencies":[],"frontmatter":{"title":"STACK service - Dask 101","subtitle":"This notebook introduces Dask's core APIs and demonstrates how to use them for scalable, parallel, and distributed data processing, culminating in deploying and interacting with a Dask cluster on the DestinE Data Lake STACK service.","tags":["STACK","Dask","Cluster"],"copyright":"© 2024 EUMETSAT","authors":[{"id":"Author: Eumetsat","name":"Author: Eumetsat"}],"license":{"content":{"id":"MIT","url":"https://opensource.org/licenses/MIT","name":"MIT License","free":true,"osi":true}},"thumbnail":"/EUMETSAT-icon-8a0df7b841a1ceb16813505816925810.png","kernelspec":{"name":"python_dedl","display_name":"Python DEDL","language":"python"},"numbering":{"title":{"offset":1}},"exports":[{"format":"ipynb","filename":"STACK-Dask-101.ipynb","url":"/STACK-Dask-101-3615c9ea6331814310045a2c301ba6b6.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"div","style":{"margin":"6px 0"},"children":[{"type":"link","style":{"textDecoration":"none"},"url":"https://jupyter.central.data.destination-earth.eu/user-redirect/lab/tree/DestinE-DataLake-Lab/STACK/STACK-Dask-101.ipynb","children":[{"type":"span","class":"launch","children":[{"type":"text","value":"🚀 Launch in JupyterHub","key":"sbnLfyBuQC"}],"key":"kJX9ODuiEb"}],"urlSource":"https://jupyter.central.data.destination-earth.eu/user-redirect/lab/tree/DestinE-DataLake-Lab/STACK/STACK-Dask-101.ipynb","key":"LdKXMa1IAH"}],"key":"y8p2iIm2rO"}],"key":"AJMnchhDzk"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Dask Core Library (APIs)","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"AZQzdxIiTW"}],"identifier":"dask-core-library-apis","label":"Dask Core Library (APIs)","html_id":"dask-core-library-apis","implicit":true,"key":"MCRl96FAfx"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Dask provides several APIs, also called collections, to enable distributed+parallel execution on larger-than-memory datasets.\nWe can think of Dask’s APIs at a high and a low level:","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"T5g2hZBW9H"}],"key":"KcVrL8XTwA"},{"type":"paragraph","children":[{"type":"image","url":"/58d59d37a749bf97727f9be46ef12be2.png","alt":"High vs Low level clothes analogy","key":"at3MLRBr5B","urlSource":"https://tutorial.dask.org/_images/high_vs_low_level_coll_analogy.png"}],"key":"PVAk6105K9"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":9,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":9,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"strong","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"High-level collections:","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"wivHWh9jSm"}],"key":"KbCdXHlPtS"},{"type":"text","value":"  Dask provides high-level ","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"fpQjNq2UcE"},{"type":"strong","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Array, Bag, and DataFrame","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"Kk0wVnDCe7"}],"key":"J0KUDTkxZN"},{"type":"text","value":"\ncollections that mimic NumPy, lists, and pandas but can operate in parallel on\ndatasets that don’t fit into memory.","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"B1kxjkxnbe"}],"key":"bZRiW2CLjg"},{"type":"listItem","spread":true,"position":{"start":{"line":12,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"strong","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"Low-level collections:","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"jrS118XXI6"}],"key":"x7NMReFF6l"},{"type":"text","value":"  Dask also provides low-level ","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"He8330n8xM"},{"type":"strong","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"Tasks (Delayed and Futures)","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"LlSAzMWEOe"}],"key":"O95ImR7idh"},{"type":"text","value":"\ncollections that give you finer control to build custom parallel and distributed computations.","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"I5saS3I3sN"}],"key":"eBm7Mu9exn"}],"key":"rWMtimGyER"},{"type":"paragraph","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"strong","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"In this tutorial we will focus on Dask Arrays and Tasks (Delayed and Futures). Please visit the ","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"yR2lS7YMjm"},{"type":"link","url":"https://examples.dask.org/index.html","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"Dask Examples","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"GSWg08B9TO"}],"urlSource":"https://examples.dask.org/index.html","key":"dLO27QJOxn"},{"type":"text","value":" and ","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"xfRYKoFG9J"},{"type":"link","url":"https://tutorial.dask.org/","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"Dask Tutorial","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"tapdyN4Qs2"}],"urlSource":"https://tutorial.dask.org/","key":"dievQr8Ju3"},{"type":"text","value":" for additional information.","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"IIBFilKJs1"}],"key":"igR9gbiUI6"}],"key":"ef9bDKMMzv"}],"key":"PIAb7mZHBK"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"dask.array - parallelized numpy","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"g2QdhVaQFg"}],"identifier":"dask-array-parallelized-numpy","label":"dask.array - parallelized numpy","html_id":"dask-array-parallelized-numpy","implicit":true,"key":"PxMz4VkrRC"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Parallel, larger-than-memory, n-dimensional array using blocked algorithms.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"artowU8tZ4"}],"key":"g0u3dLnprU"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":5,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"strong","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Parallel","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"Gor9ulXO6N"}],"key":"Vpf4C14yg7"},{"type":"text","value":": Uses all of the cores on your computer","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"PkzChiYX2j"}],"key":"x04TMSPF9R"},{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"strong","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Larger-than-memory","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"eb6nlB7Ws7"}],"key":"k04XyJuObE"},{"type":"text","value":":  Lets you work on datasets that are larger than your available memory by breaking up your array into many small pieces, operating on those pieces in an order that minimizes the memory footprint of your computation, and effectively streaming data from disk.","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"nC4fiFoFDz"}],"key":"cHWm8SQNxC"},{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"strong","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Blocked Algorithms","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"OGGK6zglEo"}],"key":"CbR7KixLPJ"},{"type":"text","value":":  Perform large computations by performing many smaller computations.","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"BeVvXjf697"}],"key":"sonSb4EUmd"}],"key":"JNlhMrkyEa"}],"key":"PTXNVyVcPQ"},{"type":"block","kind":"notebook-content","children":[{"type":"image","style":{"marginLeft":"10px"},"url":"/037e4310c3913e72533173c453c9e52f.svg","key":"IFLMpceM4j","urlSource":"https://docs.dask.org/en/stable/_images/dask-array.svg"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"In other words, Dask Array implements a subset of the NumPy ndarray interface using blocked algorithms, cutting up the large array into many small arrays. This lets us compute on arrays larger than memory using all of our cores. We coordinate these blocked algorithms using Dask graphs.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"jdbX6ChSjn"}],"key":"zkukT9rXyr"},{"type":"paragraph","position":{"start":{"line":6,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"In this notebook, we’ll build some understanding by implementing some blocked algorithms from scratch.\nWe’ll then use Dask Array to analyze large datasets, in parallel, using a familiar NumPy-like API.","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"lolcEuHJqy"}],"key":"xwEe4875AW"},{"type":"paragraph","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"strong","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Related Documentation","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"oeoccriDoF"}],"key":"UeuFvzJcwP"}],"key":"WT6x6EaBbe"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":11,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"link","url":"https://docs.dask.org/en/latest/array.html","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"Array documentation","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"QwBbHpOFsA"}],"urlSource":"https://docs.dask.org/en/latest/array.html","key":"cAO6VfMGwE"}],"key":"W0EXvrQDpb"},{"type":"listItem","spread":true,"position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"link","url":"https://youtu.be/9h_61hXCDuI","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"Array screencast","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"kMsUDyfrm5"}],"urlSource":"https://youtu.be/9h_61hXCDuI","key":"V41LKAwbtV"}],"key":"mnv9TnUNdS"},{"type":"listItem","spread":true,"position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"link","url":"https://docs.dask.org/en/latest/array-api.html","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"Array API","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"ppG5lv8h59"}],"urlSource":"https://docs.dask.org/en/latest/array-api.html","key":"JDgp2Mds9l"}],"key":"oWQTPSp00Q"},{"type":"listItem","spread":true,"position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"link","url":"https://examples.dask.org/array.html","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"Array examples","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"BPvopeSLRP"}],"urlSource":"https://examples.dask.org/array.html","key":"fodRuZ3Yis"}],"key":"XFyZI0psJl"}],"key":"fWBw7qe7KC"}],"key":"lvqSsjG8y6"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":4,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Arrays - Example","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"omXNW4LLe5"}],"identifier":"arrays-example","label":"Arrays - Example","html_id":"arrays-example","implicit":true,"key":"MsSb6lLcla"}],"key":"TKMhKrK7FV"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"A dask array looks and feels a lot like a numpy array. However, a dask array doesn’t directly hold any data. Instead, it symbolically represents the computations needed to generate the data. Nothing is actually computed until the actual numerical values are needed. This mode of operation is called “lazy”; it allows one to build up complex, large calculations symbolically before turning them over the scheduler for execution.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"WzGLM5J3l5"}],"key":"PQyRY9GXAZ"}],"key":"fSypFDaK9M"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"If we want to create a numpy array of all ones, we do it like this:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"yjnYbbbVkc"}],"key":"EJKlzDbhTx"}],"key":"q2JHdQ9XXc"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import numpy as np\nshape = (1000, 4000)\nones_np = np.ones(shape)\nones_np","key":"X7sILRnfoy"},{"type":"output","id":"DlRoJNb8nDqDF7_i61zIM","data":[],"key":"BoFkI5MfzC"}],"key":"bBU6bSjRPU"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"This array contains exactly 32 MB of data:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"fzfQPgIAZp"}],"key":"ekAmpOHi1H"}],"key":"PVwfbZqglN"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"print('%.1f MB' % (ones_np.nbytes / 1e6))","key":"L38iTB9PO2"},{"type":"output","id":"XklLblug-S5ujF3_e-j8k","data":[],"key":"rJT98q8B3T"}],"key":"Duw7qlJZMS"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Now let’s create the same array using dask’s array interface.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"RXTBPTPRo5"}],"key":"I0GLuusXGk"}],"key":"cn6d6AJzXH"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import dask.array as da\nones = da.ones(shape)\nones","key":"ZzfbJ7KOQ2"},{"type":"output","id":"f0FPwMuN70HiZ8bYdTC9c","data":[],"key":"kKperOdTod"}],"key":"xlLCfefLw2"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"This works, but we didn’t tell Dask how to split up the array, so it is not optimized for distributed computation.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Om3JguQxtq"}],"key":"to6stuhBs7"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"A crucial difference with Dask is that we must specify the chunks argument. “Chunks” describes how the array is split up over many sub-arrays.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"JIsnfHXpHz"}],"key":"A6dc4vhKRN"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"There are several ways to ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"YG2voPksLA"},{"type":"link","url":"https://docs.dask.org/en/stable/array-chunks.html","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"specify chunks","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"iMtDi8gbja"}],"urlSource":"https://docs.dask.org/en/stable/array-chunks.html","key":"n1lQgDOteP"},{"type":"text","value":".","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"ys238xieKn"}],"key":"UBWkoTwXzG"}],"key":"Ko4hGQhwb9"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"chunk_shape = (1000, 1000)\nones = da.ones(shape, chunks=chunk_shape)\nones","key":"LbzHviFSUf"},{"type":"output","id":"LtT5rXRyfvmB5RWVBV12W","data":[],"key":"v7mbVOOTrG"}],"key":"FUz1N6a0P1"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Notice that we just see a symbolic representation of the array, including its shape, dtype, and chunksize. No data has been generated yet. When we call ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"mE8nS7zBBb"},{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":".compute()","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"FuoDaUMDFz"}],"key":"HyrN6qn1E0"},{"type":"text","value":" on a dask array, the computation is trigger and the dask array becomes a numpy array.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"xqxhr33bkv"}],"key":"InKAx6EvL7"}],"key":"CkQJpXDJGw"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"ones.compute()","key":"c2B911H5aQ"},{"type":"output","id":"vRd78j0OduU7JP37V7qIZ","data":[],"key":"ZDv2KbKqaP"}],"key":"hErEFsfB98"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"In order to understand what happened when we called .compute(), we can visualize the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"knNT5sMnIE"},{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Dask graph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"nvImyaUeEz"}],"key":"m6pt7MjcXD"},{"type":"text","value":", the symbolic operations, that make up the array.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"U4Hldmlif3"}],"key":"OzoP7tuOkE"}],"key":"xw5NDoQR09"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"ones.visualize(format='svg')","key":"P1HVGSV51w"},{"type":"output","id":"cVn7ZAgMavhE-Ejls1z7n","data":[],"key":"wjiQz80ia1"}],"key":"H6JZvL55zb"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"The array has four chunks. To generate it, Dask calls np.ones four times and then concatenates this together into one array.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"cuiMVviuxK"}],"key":"yGDYFnBeDw"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Rather than immediately loading a Dask array (which puts all the data into RAM), it is more common to reduce the data somehow. For example:","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"zckPT3qEzO"}],"key":"uIfBcQIyFI"}],"key":"IvWQcvfxC0"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"sum_of_ones = ones.sum()\nsum_of_ones.visualize(format='svg')","key":"RVlVqGjMgE"},{"type":"output","id":"5EHZznGrkJ3TBCrwCbEoi","data":[],"key":"Pbe41Y6DcN"}],"key":"fiemXDPUJ0"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Here we see Dask’s strategy for finding the sum. This simple example illustrates the beauty of Dask: it automatically designs an algorithm appropriate for custom operations with big data.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"T89hwqo8R0"}],"key":"dGHYC15VPw"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"If we make our operation more complex, the graph gets more complex.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"XwWmFyHdHf"}],"key":"zaXbeRVwuI"}],"key":"lNi0vRKHhC"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"fancy_calculation = (ones * ones[::-1, ::-1]).mean()\nfancy_calculation.visualize(format='svg')","key":"Ov7pAog8zU"},{"type":"output","id":"K77LKFFxhgPjIuBhOp3BN","data":[],"key":"k2ZFY5NCgV"}],"key":"vfNjyfem5E"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"dask.delayed - parallelize generic Python code","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"c4Ampw0L6U"}],"identifier":"dask-delayed-parallelize-generic-python-code","label":"dask.delayed - parallelize generic Python code","html_id":"dask-delayed-parallelize-generic-python-code","implicit":true,"key":"pZZqW0sVp7"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"What if you don’t have an Dask array or Dask dataframe? Instead of having blocks where the function is applied to each block, you can decorate functions with ","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"tUY15kPsyN"},{"type":"inlineCode","value":"@delayed","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"ayoBrk4yoJ"},{"type":"text","value":" and ","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"qCHs0iNceA"},{"type":"emphasis","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"have the functions themselves be lazy","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"Tw0w6VOutU"}],"key":"YFrUt1gjd1"},{"type":"text","value":". Rather than compute its result immediately, it records what needs to be computed as a task into a graph that we’ll run later on parallel hardware.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"ujTD1fMRoI"}],"key":"CRcUPI7xjl"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"This is a simple way to use Dask to parallelize existing codebases or build ","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"JRxC6xhJtP"},{"type":"link","url":"https://blog.dask.org/2018/02/09/credit-models-with-dask","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"complex systems","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"nZZY3cizc4"}],"urlSource":"https://blog.dask.org/2018/02/09/credit-models-with-dask","key":"lQxCqOqmSb"},{"type":"text","value":".","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"fBbeZlISIu"}],"key":"LwqSKApssW"},{"type":"paragraph","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"strong","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Related Documentation","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"EBiPApPznh"}],"key":"qP18LWPAqt"}],"key":"e9QuFWuoWe"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":8,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"link","url":"https://docs.dask.org/en/latest/delayed.html","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Delayed documentation","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"QLmDnxRv9j"}],"urlSource":"https://docs.dask.org/en/latest/delayed.html","key":"gXTE8nwfjH"}],"key":"ZXD8p2dLuX"},{"type":"listItem","spread":true,"position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"link","url":"https://www.youtube.com/watch?v=SHqFmynRxVU","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Delayed screencast","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"QoSqG66YvV"}],"urlSource":"https://www.youtube.com/watch?v=SHqFmynRxVU","key":"oy56aPahgE"}],"key":"YbdEa6lNVv"},{"type":"listItem","spread":true,"position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"link","url":"https://docs.dask.org/en/latest/delayed-api.html","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Delayed API","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"ZvG8e8N07z"}],"urlSource":"https://docs.dask.org/en/latest/delayed-api.html","key":"GVSjquqi6L"}],"key":"a6MoNxCZPg"},{"type":"listItem","spread":true,"position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"link","url":"https://examples.dask.org/delayed.html","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"Delayed examples","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"Izyr4FR4Rw"}],"urlSource":"https://examples.dask.org/delayed.html","key":"Gsm1tKgP4x"}],"key":"pREmEmdRbA"},{"type":"listItem","spread":true,"position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"link","url":"https://docs.dask.org/en/latest/delayed-best-practices.html","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"Delayed best practices","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"PMA3TnXnus"}],"urlSource":"https://docs.dask.org/en/latest/delayed-best-practices.html","key":"KoIHcmD90m"}],"key":"l75Mq60NbF"}],"key":"VrWROkRfHD"}],"key":"RwP0F40M3s"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"A typical workfow Read-Transform-Write workflow are most often implemented as outlined hereafter.\nIn general, most workflows containing a for-loop can benefit from dask.delayed.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"krbtoMIP1z"}],"key":"QIhncoEfMH"},{"type":"code","lang":"python","value":"import dask\n    \n@dask.delayed\ndef process_file(filename):\n    data = read_a_file(filename)\n    data = do_a_transformation(data)\n    destination = f\"results/{filename}\"\n    write_out_data(data, destination)\n    return destination\n\nresults = []\nfor filename in filenames:\n    results.append(process_file(filename))\n    \ndask.compute(results)","position":{"start":{"line":3,"column":1},"end":{"line":19,"column":1}},"key":"Ak2cI47Xqa"}],"key":"S4wuTyrozU"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":5,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"dask.delayed - Example","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"NGYUqjE8UC"}],"identifier":"dask-delayed-example","label":"dask.delayed - Example","html_id":"dask-delayed-example","implicit":true,"key":"g7nHUwybS2"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"For demonstration purposes we will create simple functions to perform simple operations like add two numbers together, but they sleep for a random amount of time to simulate real work.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"HVr5rap20R"}],"key":"DEk2LOmGKM"}],"key":"azfSTW4XpA"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import time\n\ndef inc(x):\n    time.sleep(0.1)\n    return x + 1\n\ndef dec(x):\n    time.sleep(0.1)\n    return x - 1\n\ndef add(x, y):\n    time.sleep(0.2)\n    return x + y","key":"iLMJ976ldU"},{"type":"output","id":"_aHTZcHwATzR5yBMPB97S","data":[],"key":"SBppcqY6p6"}],"key":"x6JGFnLRwb"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"We can run them like normal Python functions below","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"n23svU9dBa"}],"key":"qa1sMV6aA9"}],"key":"bbhbMT9joz"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"%%time\nx = inc(1)\ny = dec(2)\nz = add(x, y)\nz","key":"h2JS5eKMPk"},{"type":"output","id":"7GHdfknDsfYHsVfcpSt9i","data":[],"key":"lBuDWNb6AJ"}],"key":"HYmLKt9dFL"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"These ran one after the other, in sequence. Note though that the first two lines inc(1) and dec(2) don’t depend on each other, we could have called them in parallel.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"X6qEK24LEh"}],"key":"Tzo7mAfL0m"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"We can call dask.delayed on these funtions to make them lazy. Rather than compute their results immediately, they record what we want to compute as a task into a graph that we’ll run later on parallel hardware.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"edBgCXzwwV"}],"key":"tdCFppfS4m"}],"key":"rKzz4cLhwk"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import dask\ninc = dask.delayed(inc)\ndec = dask.delayed(dec)\nadd = dask.delayed(add)","key":"xBKhImXWzq"},{"type":"output","id":"AlLA6zUPiFgys2BA36qmh","data":[],"key":"QDYZvty6p2"}],"key":"tZNih0NZlm"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Calling these lazy functions is now almost free. We’re just constructing a graph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"qXniwnBa0g"}],"key":"oGkWJ1Whxq"}],"key":"vDeKi5no0J"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"%%time\nx = inc(1)\ny = dec(2)\nz = add(x, y)\nz","key":"a5N9MXBnNd"},{"type":"output","id":"dk8l00nVvDDGvB-WSKNgz","data":[],"key":"zd2aM4Bbt1"}],"key":"JKwhGPeadc"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Visualize computation","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Eh1Hx9BaoD"}],"key":"Ypl2M4xYeJ"}],"key":"C00p49B0oD"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"z.visualize(format='svg', rankdir='LR')","key":"YtOFORJI0O"},{"type":"output","id":"3sac-0XR_OxP3aBI6jkcj","data":[],"key":"hOKyB81891"}],"key":"UrnrQsBZAo"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Run in parallel. Call .compute() when you want your result as a normal Python object","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"zXi0yQf13B"}],"key":"D5gtrUJrtm"}],"key":"hNpoy75hDm"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"%%time\nz.compute()","key":"ghtp9PojUf"},{"type":"output","id":"kIPbhtFdURsjZTSN50r-5","data":[],"key":"XPNRClihMd"}],"key":"erVG5hgDrB"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Parallelize Normal Python code","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"qEzH583sVa"}],"key":"Xqh02zUilX"}],"key":"DaZg0yUZ8j"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Now we use dask.delayed in a normal for-loop Python code as given in the example above. This generates graphs instead of doing computations directly, but still looks like the code we had before. Dask is a convenient way to add parallelism to existing workflows.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"ZU4SAhoUsp"}],"key":"AEXCCWDW5u"}],"key":"mpLt9m8pI5"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"%%time\nzs = []\nfor i in range(256):\n    x = inc(i)\n    y = dec(x)\n    z = add(x, y)\n    zs.append(z)\n\nzs = dask.persist(*zs)   # trigger computation in the background","key":"eq4cXRqjfB"},{"type":"output","id":"arNxAQSS3AMQE5q0PPCp9","data":[],"key":"dp7KFoNk27"}],"key":"DuMBuPHp3k"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Dask Cluster (dask.distributed)","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"CT7d2rVax2"}],"identifier":"dask-cluster-dask-distributed","label":"Dask Cluster (dask.distributed)","html_id":"dask-cluster-dask-distributed","implicit":true,"key":"Zm1M2KHkGc"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Dask has the ability to run work on multiple machines using the distributed scheduler. ","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"Ny2cUQWdeE"},{"type":"inlineCode","value":"dask.distributed","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"pyIc7ylVSc"},{"type":"text","value":" is a lightweight library for distributed computing in Python. It extends both the ","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"ahnlQviWja"},{"type":"inlineCode","value":"concurrent.futures","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"rocVg395ir"},{"type":"text","value":" and Dask APIs to run on various clusters technologies such as Kubernetes, Yarn, SLURM, PBS, etc. .\nMost of the times when you are using Dask, you will be using a distributed scheduler, which exists in the context of a Dask cluster. When we talk about Dask Clusters we can think of those as depicted in the following:","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"xjGo70Bdz5"}],"key":"gzSYG7GAVw"},{"type":"paragraph","children":[{"type":"image","url":"/7445a9f1307deaa4760238b8ed4d85c3.png","alt":"Distributed overview","key":"SEVnJUbHr1","urlSource":"https://tutorial.dask.org/_images/distributed-overview.png"}],"key":"ZdPSbYwEnG"}],"key":"SlOnaDfktS"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Dask @ DEDL","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"J4VvrJK6za"}],"identifier":"dask-dedl","label":"Dask @ DEDL","html_id":"dask-dedl","implicit":true,"key":"jW4P4WO3ua"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"DestinE Data Lake utilises a deployment of ","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"aYxM9wned5"},{"type":"link","url":"https://gateway.dask.org/","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Dask Gateway","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"EnZWPVW0sO"}],"urlSource":"https://gateway.dask.org/","key":"z3poHtRZWk"},{"type":"text","value":" on each location (bridge) in the data lake. Dask Gateway provides a secure, multi-tenant server for managing Dask clusters. It allows users to launch and use Dask clusters in a shared, centrally managed cluster environment, without requiring users to have direct access to the underlying cluster backend (e.g. Kubernetes, Hadoop/YARN, HPC Job queues, etc…).","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"XqBlDZ4i1T"}],"key":"J6WNAxr3E4"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Dask Gateway exposes a REST API to spawn clusters on demand. The overall architecture of Dask Gateway is depicted hereafter.\n","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"j7eytJ5KE9"},{"type":"image","url":"/04cc7514c92f1ae43e3b621d7cc0a124.svg","key":"l8exuLNgQ2","urlSource":"https://gateway.dask.org/_images/architecture.svg"}],"key":"k5BVeHok2P"},{"type":"heading","depth":3,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"How to connect and spawn a cluster?","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"uCZwTloEe3"}],"identifier":"how-to-connect-and-spawn-a-cluster","label":"How to connect and spawn a cluster?","html_id":"how-to-connect-and-spawn-a-cluster","implicit":true,"key":"P98rPxwMxd"},{"type":"paragraph","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"strong","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Central Site","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"Ldj1DZumJs"}],"key":"iZJBb1mFOM"}],"key":"J0KpOwUinT"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":10,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"address: ","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"oPaX7E7p1s"},{"type":"link","url":"http://dask.central.data.destination-earth.eu","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"http://​dask​.central​.data​.destination​-earth​.eu","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"Q4e9ARH7uo"}],"urlSource":"http://dask.central.data.destination-earth.eu","key":"J6zkBGWGSM"}],"key":"js3l7SbVwD"},{"type":"listItem","spread":true,"position":{"start":{"line":11,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"proxy_address: tcp://dask.central.data.destination-earth.eu:80","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"X3VQFcfaAY"}],"key":"Wd2xfG1zEh"}],"key":"szzpbILoD5"},{"type":"paragraph","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"strong","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"LUMI Bridge","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"dnDcJ4kdCf"}],"key":"BacuyW14hm"}],"key":"ZhUGBsVrVj"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":14,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"address: ","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"ydzUAglzHg"},{"type":"link","url":"http://dask.lumi.data.destination-earth.eu","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"http://​dask​.lumi​.data​.destination​-earth​.eu","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"MBdoy4qKBw"}],"urlSource":"http://dask.lumi.data.destination-earth.eu","key":"pKgO6WFM0V"}],"key":"EGa8sNw2uE"},{"type":"listItem","spread":true,"position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"proxy_address: tcp://dask.lumi.data.destination-earth.eu:80","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"eOxjlmVm5J"}],"key":"oaIXTwX8ue"}],"key":"b41GHhNT6O"}],"key":"AToCwtrmzj"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"from dask_gateway.auth import GatewayAuth\nfrom getpass import getpass\nfrom destinelab import AuthHandler as DESP_AuthHandler\n\nclass DESPAuth(GatewayAuth):\n    def __init__(self, username: str):\n        self.auth_handler = DESP_AuthHandler(username, getpass(\"Please input your DESP password: \"))\n        self.access_token = self.auth_handler.get_token()\n    \n    def pre_request(self, _):\n        headers = {\"Authorization\": \"Bearer \" + self.access_token}\n        return headers, None","visibility":"show","key":"QLeFNDvFIg"},{"type":"output","id":"trMJKn7xqUY60vHLp-7yy","data":[],"visibility":"show","key":"O5m8buxBgu"}],"visibility":"show","key":"gJjwjbWl9v"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Only authenticated access is granted to the DEDL STACK service Dask, therefore a helper class to authenticate a user against the DESP identity management system is implemented. The users password is directly handed over to the request object and is not permanently stored.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"RnaLHnW4G1"}],"key":"eZuXAOH2WA"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"In the following, please enter your DESP username and password. Again, the password will only be saved for the duration of this user session and will be remove as soon as the notebook/kernel is closed.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"ocIr0tOzYs"}],"key":"GJWvJEsu6W"}],"key":"ccRxbJb2vd"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"from rich.prompt import Prompt\nmyAuth = DESPAuth(username=Prompt.ask(prompt=\"Username\"))","visibility":"show","key":"WoI1oywjAx"},{"type":"output","id":"9pQIvwpq0k7lbygwbYR0B","data":[],"visibility":"show","key":"ojFaxl6JAa"}],"visibility":"show","key":"pQkCm1k40c"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"from dask_gateway import Gateway\ngateway = Gateway(address=\"http://dask.central.data.destination-earth.eu\",\n                  proxy_address=\"tcp://dask.central.data.destination-earth.eu:80\",\n                  auth=myAuth)","visibility":"show","key":"i18Y6j7cxD"},{"type":"output","id":"qeo1VdgaH8ITZ-lTkCs_b","data":[],"visibility":"show","key":"zGbzRrEABz"}],"visibility":"show","key":"tNNAFSKbdC"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Cluster creation and client instantiation to communicate with the new cluster","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ACt0yy7BWR"}],"key":"xCp8TBK7nJ"}],"key":"c9OmMZYTQQ"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"cluster = gateway.new_cluster()\nclient = cluster.get_client()\ncluster","visibility":"show","key":"AUboxqOpfn"},{"type":"output","id":"zbcvLiKDCAI-LKx3mU_9a","data":[],"visibility":"show","key":"TQ1p3JbbO2"}],"visibility":"show","key":"NdNPSYjXAk"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Up to now the cluster will only consist of the distributed scheduler. If you want to spawn workers directly via Python adaptively, please use the following method call. With the following the cluster will be scaled to 2 workers initially. Depending on the load, Dask will add addtional workers, up to 5, if needed.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"RSrSTEhjV8"}],"key":"sZorNOcLg1"}],"key":"BhCL92SU5r"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"cluster.adapt(minimum=2, maximum=5)","visibility":"show","key":"N9o9jgRIdu"},{"type":"output","id":"FEFc_pR-7tMETtbp1P2Vi","data":[],"visibility":"show","key":"M5eFu08ngw"}],"visibility":"show","key":"y1oNFevj9k"},{"type":"block","kind":"notebook-content","data":{"tags":[]},"children":[{"type":"heading","depth":4,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"dask.futures - non-blocking distributed calculations","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ZS37P3O1lW"}],"identifier":"dask-futures-non-blocking-distributed-calculations","label":"dask.futures - non-blocking distributed calculations","html_id":"dask-futures-non-blocking-distributed-calculations","implicit":true,"key":"tIFhvPHDGC"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"We will now make use of the remote Dask Cluster using the Dask low-level collection dask.futures.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"EqtU5t3KAb"}],"key":"skNwgyxU6S"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Submit arbitrary functions for computation in a parallelized, eager, and non-blocking way.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"xkGgHDW4mr"}],"key":"ih0uoZocNV"},{"type":"paragraph","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"The ","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"viqjsjHkin"},{"type":"inlineCode","value":"futures","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"m1veu0zrMB"},{"type":"text","value":" interface (derived from the built-in ","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"jSwFrHsqf9"},{"type":"inlineCode","value":"concurrent.futures","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"ZpjVJelMQF"},{"type":"text","value":") provide fine-grained real-time execution for custom situations. We can submit individual functions for evaluation with one set of inputs, or evaluated over a sequence of inputs with ","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"K8DHPJlivy"},{"type":"inlineCode","value":"submit()","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"rM8Ul10edA"},{"type":"text","value":" and ","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"SNnAW9xh6A"},{"type":"inlineCode","value":"map()","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"V00XYhXaiL"},{"type":"text","value":". The call returns immediately, giving one or more ","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"KfPVdciCI2"},{"type":"emphasis","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"futures","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"CzQGkewhsp"}],"key":"M5hEhdSb7u"},{"type":"text","value":", whose status begins as “pending” and later becomes “finished”. There is no blocking of the local Python session.","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"iBbZeMUMrk"}],"key":"CaON8nO9WB"},{"type":"paragraph","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"strong","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Important","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"yO1lTDsajk"}],"key":"R3gnyVgMXj"}],"key":"pT6zKB5K16"},{"type":"paragraph","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"This is the important difference between futures and delayed. Both can be used to support arbitrary task scheduling, but delayed is lazy (it just constructs a graph) whereas futures are eager. With futures, as soon as the inputs are available and there is compute available, the computation starts.","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"Z6kPkxy1gh"}],"key":"k94DYAqwmy"},{"type":"paragraph","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"strong","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"Related Documentation","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"TvkbJ9juwk"}],"key":"ccoYbLYUhc"}],"key":"KzfCjLex00"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":14,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"link","url":"https://docs.dask.org/en/latest/futures.html","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"Futures documentation","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"METyXuLw6h"}],"urlSource":"https://docs.dask.org/en/latest/futures.html","key":"KOnMAzJ32J"}],"key":"C2w5tLP6VL"},{"type":"listItem","spread":true,"position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"link","url":"https://www.youtube.com/watch?v=07EiCpdhtDE","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"Futures screencast","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"gCVQ5Vsi5r"}],"urlSource":"https://www.youtube.com/watch?v=07EiCpdhtDE","key":"lP409uLPp6"}],"key":"ojN9isUVR4"},{"type":"listItem","spread":true,"position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"link","url":"https://examples.dask.org/futures.html","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"text","value":"Futures examples","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"kYMZH6cwet"}],"urlSource":"https://examples.dask.org/futures.html","key":"ZEBQsPQYsd"}],"key":"lNAJ0edZIW"}],"key":"GJ3p3Y1yjw"}],"visibility":"show","key":"WSALJCeX03"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"This is the same workflow that as given above in the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"pbSJhpzwK1"},{"type":"inlineCode","value":"dask.delayed","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"aMKI479Stt"},{"type":"text","value":" section. It is a for-loop to iterate of certain files to perform a transformation and to write the result.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"sPOmMgrpTf"}],"key":"tnCoqrOVV0"},{"type":"code","lang":"python","value":"def process_file(filename):\n    data = read_a_file(filename)\n    data = do_a_transformation(data)\n    destination = f\"results/{filename}\"\n    write_out_data(data, destination)\n    return destination\n\nfutures = []\nfor filename in filenames:\n    future = client.submit(process_file, filename)\n    futures.append(future)\n    \nfutures","position":{"start":{"line":3,"column":1},"end":{"line":17,"column":1}},"key":"EPMo0Iq8XW"}],"key":"J2CuZ2ZTOv"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"from time import sleep\n\n\ndef inc(x):\n    sleep(1)\n    return x + 1","visibility":"show","key":"EMmBQER4Qp"},{"type":"output","id":"NGBgbCT_GeXHzKjzpOXps","data":[],"visibility":"show","key":"Ua0YNxUhCz"}],"visibility":"show","key":"yysMDZtPYn"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"We can run these function locally","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"jakVQ8YV1u"}],"key":"pyqzVpqZV1"}],"key":"BTq1hWVcX6"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"inc(1)","visibility":"show","key":"rAymUdE0iH"},{"type":"output","id":"CbCoQtsVEgj6Je4pwtXJg","data":[],"visibility":"show","key":"a38w9IwGKy"}],"visibility":"show","key":"gcBXjYIPAK"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Or we can submit them to run remotely with Dask. This immediately returns a future that points to the ongoing computation, and eventually to the stored result.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"oIdVbAHzr3"}],"key":"rhWeU7MmyP"}],"key":"ITFlkSScWf"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"future = client.submit(inc, 1)  # returns immediately with pending future\nfuture","visibility":"show","key":"NpME0KQZR1"},{"type":"output","id":"AL32w6e8DmYZ51qFbUDBy","data":[],"visibility":"show","key":"fUgITVORbc"}],"visibility":"show","key":"QoefKbnvTd"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"If you wait a second, and then check on the future again, you’ll see that it has finished.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"h4jKxMW1iT"}],"key":"NlFd6lXzcS"}],"key":"ODttiWimcy"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"future","visibility":"show","key":"oRIwMjkSAz"},{"type":"output","id":"tH_KMEFvN-5A2JDuEGjTd","data":[],"visibility":"show","key":"oMBN23lamV"}],"visibility":"show","key":"byybTRiNwY"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"You can block on the computation and gather the result with the .result() method.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"WXA7OulNDx"}],"key":"lCKc7blvSi"}],"key":"Ambwd33MTm"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"future.result()","visibility":"show","key":"dIVJwLtiKI"},{"type":"output","id":"suMrrqsEUIGTTLIpZTucN","data":[],"visibility":"show","key":"zjwtvlPSrL"}],"visibility":"show","key":"gwmx8szkP7"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Other ways to wait for a future","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Sist7kHO48"}],"key":"s5RTp71CYY"}],"key":"UlKqxDdRrZ"},{"type":"code","lang":"python","value":"from dask.distributed import wait, progress\nprogress(future)","position":{"start":{"line":2,"column":1},"end":{"line":5,"column":1}},"key":"HqThHhbLbT"},{"type":"paragraph","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"shows a progress bar in the notebook. This progress bar is also asynchronous, and doesn’t block the execution of other code in the meanwhile.","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"KXDJa4B7WW"}],"key":"vVLNYqrJVd"},{"type":"code","lang":"python","value":"wait(future)","position":{"start":{"line":8,"column":1},"end":{"line":10,"column":1}},"key":"jhfGDu83zh"},{"type":"paragraph","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"blocks and forces the notebook to wait until the computation pointed to by ","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"YNxXpSH7h3"},{"type":"inlineCode","value":"future","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"NlIbzdpLSw"},{"type":"text","value":" is done. However, note that if the result of ","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"suVqcPu0bQ"},{"type":"inlineCode","value":"inc()","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"cIw9KMCJEy"},{"type":"text","value":" is sitting in the cluster, it would take ","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"kKANaGPHX3"},{"type":"strong","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"no time","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"rkPaeTDEuT"}],"key":"mmTfqdFWvu"},{"type":"text","value":" to execute the computation now, because Dask notices that we are asking for the result of a computation it already knows about. More on this later.","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"HgJs5ojjF4"}],"key":"xOkA2rESch"},{"type":"paragraph","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"strong","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"Other ways to gather results","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"qUn1BzVDjj"}],"key":"V3LKH72xRH"}],"key":"tXNNzAbaC8"},{"type":"code","lang":"python","value":"client.gather(futures)","position":{"start":{"line":14,"column":1},"end":{"line":16,"column":1}},"key":"aBba1fuHn6"},{"type":"paragraph","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"text","value":"gathers results from more than one future.","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"gKG7eykPOr"}],"key":"yi68b3V8N8"}],"key":"RzK5YOhrip"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"from dask.distributed import wait, progress\ndef inc(x):\n    sleep(1)\n    return x + 1\n\n\nfuture_x = client.submit(inc, 1)\nfuture_y = client.submit(inc, 2)\nfuture_z = client.submit(sum, [future_x, future_y])\nprogress(future_z)","visibility":"show","key":"ewGprsmIUI"},{"type":"output","id":"5aoJnMu_xGKtLWHlsHo72","data":[],"visibility":"show","key":"tp6xtwgQPk"}],"visibility":"show","key":"mo8sGGNQbD"},{"type":"block","kind":"notebook-content","children":[{"type":"div","class":"alert-warning","children":[{"type":"text","value":"Remove your cluster again to free up resources when you are done.","key":"x8Mg6Tmv8o"}],"key":"QBDK0CpgXs"}],"key":"beAKSYXVPJ"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"cluster.close(shutdown=True)","visibility":"show","key":"HVHXxP8tZw"},{"type":"output","id":"J5SC01uP5vDBthQ7CTYIa","data":[],"visibility":"show","key":"y0iTa64bHP"}],"visibility":"show","key":"TpSipw7Jk2"}],"key":"YmnxS9Mmqf"},"references":{"cite":{"order":[],"data":{}}}}