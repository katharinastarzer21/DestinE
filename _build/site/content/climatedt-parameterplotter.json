{"version":2,"kind":"Notebook","sha256":"5da0dcd01c7a2794a0b4a74ef850aff91e2a46dd46e2f1e8a27114ff46a67434","slug":"climatedt-parameterplotter","location":"/production/HDA/DestinE_Digital_Twins/ClimateDT-ParameterPlotter.ipynb","dependencies":[],"frontmatter":{"title":"HDA Climate DT Parameter Plotter - Tutorial","subtitle":"This notebook provides an interactive workflow to select, query, download, and visualize Climate Digital Twin parameters from the DestinE Data Lake using the DEDL HDA API.","tags":["HDA","ECMWF","Earthkit","Digital Twin"],"copyright":"Â© 2024 EUMETSAT","authors":[{"id":"Author: Eumetsat","name":"Author: Eumetsat"}],"license":{"content":{"id":"MIT","url":"https://opensource.org/licenses/MIT","name":"MIT License","free":true,"osi":true}},"thumbnail":"../../img/ECMWF.png","kernelspec":{"name":"python_dedl","display_name":"Python DEDL","language":"python"},"numbering":{"title":{"offset":1}},"exports":[{"format":"ipynb","filename":"ClimateDT-ParameterPlotter.ipynb","url":"/ClimateDT-ParameterP-c9f583af2d3b1dae3d85dc570e483843.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"div","style":{"margin":"6px 0"},"children":[{"type":"link","style":{"textDecoration":"none"},"url":"https://jupyter.central.data.destination-earth.eu/user-redirect/lab/tree/DestinE-DataLake-Lab/HDA/DestinE%20Digital%20Twins/ClimateDT-ParameterPlotter.ipynb","children":[{"type":"span","class":"launch","children":[{"type":"text","value":"ðŸš€ Launch in JupyterHub","key":"PTAsi7foG9"}],"key":"BrYWtJUxj7"}],"urlSource":"https://jupyter.central.data.destination-earth.eu/user-redirect/lab/tree/DestinE-DataLake-Lab/HDA/DestinE%20Digital%20Twins/ClimateDT-ParameterPlotter.ipynb","key":"HPDtCB191b"}],"key":"iEfRztqF0V"}],"key":"JYK6o2dHED"},{"type":"block","kind":"notebook-content","data":{"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Credit","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"gxFMdDSIIb"}],"key":"NkgcMe3OsI"},{"type":"text","value":": Earthkit and HDA Polytope used in this context are both packages provided by the European Centre for Medium-Range Weather Forecasts (","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"CSRAq9qhbt"},{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"ECMWF","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Cl5tXieain"}],"key":"WlOIu1aQ0E"},{"type":"text","value":").","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"q3Qv4ecNCC"}],"key":"zQsMZvwhMU"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"strong","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"DEDL Harmonised Data Access","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"hovQEGfCBH"}],"key":"cm35iUh9bR"},{"type":"text","value":" is used in this example to access and plot Climate DT parameter.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"kpBtOQmYJW"}],"key":"gnFHomi5Dw"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"link","url":"https://destine-data-lake-docs.data.destination-earth.eu/en/latest/dedl-discovery-and-data-access/Introduction-to-Discovery-and-Data-Access-services/Introduction-to-Discovery-and-Data-Access-services.html#hda-harmonised-data-access","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Documentation DestinE DataLake HDA","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"bEpmOjEwhp"}],"urlSource":"https://destine-data-lake-docs.data.destination-earth.eu/en/latest/dedl-discovery-and-data-access/Introduction-to-Discovery-and-Data-Access-services/Introduction-to-Discovery-and-Data-Access-services.html#hda-harmonised-data-access","key":"n04D48FHCw"}],"key":"UmUlKvAgoJ"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"link","url":"https://confluence.ecmwf.int/display/DDCZ/DestinE+Parameter+Portfolios","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Documentation Digital Twin - Parameter Usage","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"oc0ekiK0my"}],"urlSource":"https://confluence.ecmwf.int/display/DDCZ/DestinE+Parameter+Portfolios","key":"jGuOU7Onde"}],"key":"X2zUiramxe"}],"visibility":"show","key":"XTss9DkfM1"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Import the required packages","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Y0GUHuAFsM"}],"identifier":"import-the-required-packages","label":"Import the required packages","html_id":"import-the-required-packages","implicit":true,"key":"cZDlqlUulr"}],"key":"jgygD30Wec"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Import the Climate DT parameter & scenario dictionary","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"WiHOAtRSFx"}],"key":"lk8ftoHtlj"}],"key":"FDzDTEeJZH"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"from destinelab import climate_dt_dictionary\nimport ipywidgets as widgets\nimport json\nimport datetime\n\nimport importlib.metadata","visibility":"show","key":"F0j74WpTD3"},{"type":"output","id":"TS7_4kyKvSL1hjooEBOB1","data":[],"visibility":"show","key":"q9SElWz64O"}],"visibility":"show","key":"EAu8bQcbcA"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Climate DT parameter selection (we limit the plotting to one parameter)","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"d60pZyz1sj"}],"identifier":"climate-dt-parameter-selection-we-limit-the-plotting-to-one-parameter","label":"Climate DT parameter selection (we limit the plotting to one parameter)","html_id":"climate-dt-parameter-selection-we-limit-the-plotting-to-one-parameter","implicit":true,"key":"p5IKC5tfoT"}],"key":"zdQYEQt7tO"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# Create search box\nsearch_box = widgets.Text(placeholder='Search by parameter name', description='Search:', disabled=False)\n\n# Create dropdown to select entry\nentry_dropdown = widgets.Dropdown(\n    options=[(entry['paramName'], i) for i, entry in enumerate(climate_dt_dictionary.climateDT_params)],\n    description='Select Entry:'\n)\n\ndef filter_entries(search_string):\n    return [(entry['paramName'], i) for i, entry in enumerate(climate_dt_dictionary.climateDT_params) if search_string.lower() in entry['paramName'].lower()]\n\ndef on_search_change(change):\n    search_string = change.new\n    if search_string:\n        filtered_options = filter_entries(search_string)\n        entry_dropdown.options = filtered_options\n    else:\n        entry_dropdown.options = [(entry['paramName'], i) for i, entry in enumerate(climate_dt_dictionary.climateDT_params)]\n\nsearch_box.observe(on_search_change, names='value')\n\n# Display widgets\ndisplay(search_box, entry_dropdown)\n\ndef get_selected_entry():\n    return entry_dropdown.value\n","visibility":"show","key":"ByFzVaAQ5l"},{"type":"output","id":"sDvV8NvBJAFGRNFFjKQ4l","data":[{"output_type":"display_data","metadata":{},"data":{"application/vnd.jupyter.widget-view+json":{"content":"{\"model_id\":\"730e94738cca4f2580fa8dcec2a61bee\",\"version_major\":2,\"version_minor\":0}","content_type":"application/vnd.jupyter.widget-view+json"},"text/plain":{"content":"Text(value='', description='Search:', placeholder='Search by parameter name')","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"application/vnd.jupyter.widget-view+json":{"content":"{\"model_id\":\"82c5302bd69343d3b3c20ca9f07ccb82\",\"version_major\":2,\"version_minor\":0}","content_type":"application/vnd.jupyter.widget-view+json"},"text/plain":{"content":"Dropdown(description='Select Entry:', options=(('Total column cloud liquid water', 0), ('Total column cloud icâ€¦","content_type":"text/plain"}}}],"visibility":"show","key":"i9IBW9movi"}],"visibility":"show","key":"iXupw7hvhc"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# Print the details of the parameter (Polytope convention):\nselected_index = get_selected_entry()\nselected_entry = climate_dt_dictionary.climateDT_params[selected_index]\nprint(json.dumps(selected_entry,indent=4))","visibility":"show","key":"Jh24H8anVX"},{"type":"output","id":"ryDweIlrAjedzVv9p3Mhx","data":[{"name":"stdout","output_type":"stream","text":"{\n    \"param\": \"167\",\n    \"paramName\": \"2 metre temperature\",\n    \"shortName\": \"2t\",\n    \"unit\": \"K\",\n    \"encoding\": \"instantaneous\",\n    \"isNemo\": \"IFS-NEMO\",\n    \"isIcon\": \"ICON\",\n    \"isFESOM\": \"IFS-FESOM\",\n    \"stream\": \"clte\",\n    \"type\": \"fc\",\n    \"time\": \"Hourly\",\n    \"levtype\": \"sfc\",\n    \"levelist\": \"\"\n}\n"}],"visibility":"show","key":"MpKefQzPlK"}],"visibility":"show","key":"wsjwlwgHBH"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Choose now the Scenario from which we want to obtain the Climate Parameter","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"c7OcivlSwe"}],"identifier":"choose-now-the-scenario-from-which-we-want-to-obtain-the-climate-parameter","label":"Choose now the Scenario from which we want to obtain the Climate Parameter","html_id":"choose-now-the-scenario-from-which-we-want-to-obtain-the-climate-parameter","implicit":true,"key":"kvpDSEOTES"}],"key":"JxMTTAntOK"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# Create dropdown to select scenario\nscenario_dropdown = widgets.Dropdown(\n    options=[(f\"{entry['experiment']} - {entry['model']} - {resolution}\", (i, resolution)) for i, entry in enumerate(climate_dt_dictionary.climateDT_scenario) for resolution in entry['resolution']],\n    description='Scenario:'\n)\n\n# Function to generate hourly slots\ndef generate_hourly_slots():\n    hours = []\n    for hour in range(0, 24):\n        for minute in range(0, 60, 60):  # Step by 60 minutes (1 hour)\n            hours.append(datetime.time(hour, minute))\n    return hours\n\n# Create dropdown to select hour\nhourly_slots = generate_hourly_slots()\nhour_dropdown = widgets.Dropdown(options=[(str(slot), slot) for slot in hourly_slots], description='Select Hour:', disabled=False)\n\n# Create date picker widgets\nstart_date_picker = widgets.DatePicker(description='Start Date:', disabled=False)\n\ndef on_scenario_change(change):\n    selected_index, selected_resolution = change.new\n    selected_sc_entry = climate_dt_dictionary.climateDT_scenario[selected_index]\n    date_from = datetime.datetime.strptime(selected_sc_entry['dateFrom'], '%m/%d/%Y').date()\n    start_date_picker.max = None\n    start_date_picker.min = date_from\n    start_date_picker.max = datetime.datetime.strptime(selected_sc_entry['dateTo'], '%m/%d/%Y').date()\n    start_date_picker.value = date_from\n\nscenario_dropdown.observe(on_scenario_change, names='value')\n\n# Set initial values directly\nselected_sc_entry = climate_dt_dictionary.climateDT_scenario[0]\n# Convert dateFrom string to date object\ndate_from = datetime.datetime.strptime(selected_sc_entry['dateFrom'], '%m/%d/%Y').date()\n\n# Set initial values directly\nstart_date_picker.min = date_from\nstart_date_picker.max = datetime.datetime.strptime(selected_sc_entry['dateTo'], '%m/%d/%Y').date()\nstart_date_picker.value = date_from\n\n# Display widgets\nif selected_entry[\"time\"] == \"Hourly\":\n    display(scenario_dropdown, start_date_picker, hour_dropdown)\nelse:\n    display(scenario_dropdown, start_date_picker)\n\ndef get_selected_values():\n    selected_scenario_index, selected_resolution = scenario_dropdown.value\n    selected_scenario = climate_dt_dictionary.climateDT_scenario[selected_scenario_index]\n    selected_start_date = start_date_picker.value\n    selected_end_date = \"\" # end_date_picker.value\n    selected_hour = \"00:00:00\"\n    if selected_entry[\"time\"] == \"Hourly\":\n        selected_hour = hour_dropdown.value\n        \n    return selected_scenario_index, selected_scenario, selected_resolution, selected_start_date, selected_end_date, selected_hour\n\n# Example usage:\nselected_scenario_index, selected_scenario, selected_resolution, selected_start_date, selected_end_date, selected_hour = get_selected_values()\n","visibility":"show","key":"BAE994RPFu"},{"type":"output","id":"9TBumKxPxkrmQSjYLTH3f","data":[{"output_type":"display_data","metadata":{},"data":{"application/vnd.jupyter.widget-view+json":{"content":"{\"model_id\":\"d203ab7602144686be6f7b0568502bcf\",\"version_major\":2,\"version_minor\":0}","content_type":"application/vnd.jupyter.widget-view+json"},"text/plain":{"content":"Dropdown(description='Scenario:', options=(('ssp3-7.0 - IFS-NEMO - high', (0, 'high')), ('ssp3-7.0 - IFS-NEMO â€¦","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"application/vnd.jupyter.widget-view+json":{"content":"{\"model_id\":\"e6568786ead64ebb9c292c6c713eeeeb\",\"version_major\":2,\"version_minor\":0}","content_type":"application/vnd.jupyter.widget-view+json"},"text/plain":{"content":"DatePicker(value=datetime.date(2020, 1, 1), description='Start Date:', max=datetime.date(2039, 12, 30), min=daâ€¦","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"application/vnd.jupyter.widget-view+json":{"content":"{\"model_id\":\"bc39b8ce57e244818b2bf3f38cc5472b\",\"version_major\":2,\"version_minor\":0}","content_type":"application/vnd.jupyter.widget-view+json"},"text/plain":{"content":"Dropdown(description='Select Hour:', options=(('00:00:00', datetime.time(0, 0)), ('01:00:00', datetime.time(1,â€¦","content_type":"text/plain"}}}],"visibility":"show","key":"l8ZtwdNXwP"}],"visibility":"show","key":"U7cQlVMUEw"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Handle different Levels to be selected (if any)","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"zl02znW1BX"}],"key":"APJrsvPOOt"}],"key":"B730vVwl6W"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# Define a global variable\nglobal global_widget\nglobal_widget = None\n\nif selected_entry[\"levelist\"] != \"\":\n    # Convert levelist string to list of integers\n    levelist = list(map(int, selected_entry[\"levelist\"].split('/')))\n    if(selected_scenario['model']=='IFS-NEMO'):\n        levelist = levelist + [73,74,75]\n\n      \n    # Create a function to generate the widget based on the selection mode\n    def generate_widget(selection_mode):\n        global global_widget\n        if selection_mode == 'Single':\n            global_widget = widgets.Dropdown(options=levelist, description='Select level:')\n            return global_widget\n        elif selection_mode == 'Multiple':\n            global_widget = widgets.SelectMultiple(options=levelist, description='Select levels:')\n            return global_widget\n\n    # Create a dropdown widget to choose selection mode\n    selection_mode_dropdown = widgets.Dropdown(options=['Single', 'Multiple'], description='Selection Mode:')\n\n    # Create an output widget to display the selected option(s)\n    output = widgets.Output()\n\n    # Function to display the widget based on the selection mode\n    def display_widget(selection_mode):\n        output.clear_output()\n        with output:\n            display(generate_widget(selection_mode))\n\n    # Define a function to handle the change in selection mode\n    def on_dropdown_change(change):\n        display_widget(change.new)\n\n    # Register the function to handle dropdown changes\n    selection_mode_dropdown.observe(on_dropdown_change, names='value')\n\n    # Display the widgets\n    display(selection_mode_dropdown, output)\n\n    # Display the initial widget based on default selection mode\n    display_widget('Single')","visibility":"show","key":"A7r9vZQJL3"},{"type":"output","id":"NpE08bGNzvbOcomGHM4hb","data":[],"visibility":"show","key":"QGBQPgVewY"}],"visibility":"show","key":"r0I9tVBz6v"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# Function to convert tuple or single integer to string separated by \"/\"\ndef convert_to_string(input):\n    if isinstance(input, tuple):\n        return '/'.join(map(str, input))\n    elif isinstance(input, int):\n        return str(input)\n    else:\n        return None  # Handle other types if needed\n\nlevlInput = \"\"\nif global_widget != None:\n    # Test cases\n    levlInput = convert_to_string(global_widget.value)\n","visibility":"show","key":"WxZa4ECLE2"},{"type":"output","id":"BSzC1Ui9WBUE1GukGDp8n","data":[],"visibility":"show","key":"kd96cWGZ6L"}],"visibility":"show","key":"CZhtN8616t"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"hourchoice4 = '{shour}00'.format(shour = str(get_selected_values()[5]).split(\":\")[0])\n\nfilter_params = {\n  \"class\": \"d1\",             # fixed \n  \"dataset\": \"climate-dt\",   # fixed climate-dt access\n  \"activity\" : get_selected_values()[1][\"activity\"],\n  \"experiment\" : get_selected_values()[1][\"experiment\"].upper(),\n  \"model\": get_selected_values()[1][\"model\"],\n  \"generation\": \"1\",         # fixed Specifies the generation of the dataset, which can be incremented as required (latest is 1)\n  \"realization\": \"1\",        # fixed Specifies the climate realization. Default 1. Based on perturbations of initial conditions\n  \"resolution\": get_selected_values()[2],      # standard/ high \n  \"expver\": \"0001\",          # fixed experiment version \n  \"stream\": selected_entry[\"stream\"],\n  \"time\": hourchoice4,            # choose the hourly slot(s)\n  \"type\": \"fc\",              # fixed forecasted fields\n  \"levtype\": selected_entry[\"levtype\"],  \n  \"levelist\": str(levlInput),  \n  \"param\": str(selected_entry[\"param\"]),  \n}\n\n# Print the result in JSON format\ndatechoice = \"{fname}T{shour}Z\".format(fname = get_selected_values()[3], shour = get_selected_values()[5] )\nprint(\"datechoice = \", datechoice)\nprint(json.dumps(filter_params, indent=4))\n","visibility":"show","key":"DMdXSfkeDz"},{"type":"output","id":"Ckmp-K_JAceFeuFWW0xok","data":[{"name":"stdout","output_type":"stream","text":"datechoice =  2028-06-06T00:00:00Z\n{\n    \"class\": \"d1\",\n    \"dataset\": \"climate-dt\",\n    \"activity\": \"ScenarioMIP\",\n    \"experiment\": \"SSP3-7.0\",\n    \"model\": \"IFS-NEMO\",\n    \"generation\": \"1\",\n    \"realization\": \"1\",\n    \"resolution\": \"high\",\n    \"expver\": \"0001\",\n    \"stream\": \"clte\",\n    \"time\": \"0000\",\n    \"type\": \"fc\",\n    \"levtype\": \"sfc\",\n    \"levelist\": \"\",\n    \"param\": \"167\"\n}\n"}],"visibility":"show","key":"tAu6916htu"}],"visibility":"show","key":"Qc688NlUZX"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Obtain Authentication Token","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"M0zWcHgrHp"}],"identifier":"obtain-authentication-token","label":"Obtain Authentication Token","html_id":"obtain-authentication-token","implicit":true,"key":"qIrgaKbxAu"}],"key":"iKpnd2E0Yf"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"import requests\nfrom requests.adapters import HTTPAdapter\nfrom urllib3.util.retry import Retry\nimport json\nimport os\nfrom getpass import getpass\nimport destinelab as deauth","visibility":"show","key":"zJTmThwh4F"},{"type":"output","id":"wMa6wh6gJ_hsJniRMHG2N","data":[],"visibility":"show","key":"OKbel65ipl"}],"visibility":"show","key":"QJZlvZupeJ"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"DESP_USERNAME = input(\"Please input your DESP username: \")\nDESP_PASSWORD = getpass(\"Please input your DESP password: \")\n\nauth = deauth.AuthHandler(DESP_USERNAME, DESP_PASSWORD)\naccess_token = auth.get_token()\nif access_token is not None:\n    print(\"DEDL/DESP Access Token Obtained Successfully\")\nelse:\n    print(\"Failed to Obtain DEDL/DESP Access Token\")\n\nauth_headers = {\"Authorization\": f\"Bearer {access_token}\"}","visibility":"show","key":"cSV2TAHumC"},{"type":"output","id":"h_xIrbHKdsU6JHMsWJtQi","data":[{"name":"stdout","output_type":"stream","text":"Please input your DESP username:  eum-dedl-user\nPlease input your DESP password:  Â·Â·Â·Â·Â·Â·Â·Â·\n"},{"name":"stdout","output_type":"stream","text":"Response code: 200\nDEDL/DESP Access Token Obtained Successfully\n"}],"visibility":"show","key":"uKqoRVrFvJ"}],"visibility":"show","key":"hmLz02A4oZ"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Check if DT access is granted","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"hGxSKTaMpz"}],"identifier":"check-if-dt-access-is-granted","label":"Check if DT access is granted","html_id":"check-if-dt-access-is-granted","implicit":true,"key":"eg4GsZf3k2"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"If DT access is not granted, you will not be able to execute the rest of the notebook.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"NEagUXi5BW"}],"key":"wXQIPfh31O"}],"key":"FOuzFEjUQq"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"import importlib\ninstalled_version = importlib.metadata.version(\"destinelab\")\nversion_number = installed_version.split('.')[1]\nif((int(version_number) >= 8 and float(installed_version) < 1) or float(installed_version) >= 1):\n    auth.is_DTaccess_allowed(access_token)","visibility":"show","key":"l9RIdDIjeU"},{"type":"output","id":"UImDRvnLqI7JkvvdGBMhQ","data":[{"name":"stdout","output_type":"stream","text":"DT Output access allowed\n"}],"visibility":"show","key":"qFIRc2qR9I"}],"visibility":"show","key":"B60RK1n5Sb"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Query using the DEDL HDA API","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"dAdYt3bvfJ"}],"identifier":"query-using-the-dedl-hda-api","label":"Query using the DEDL HDA API","html_id":"query-using-the-dedl-hda-api","implicit":true,"key":"NQsnqlXthC"}],"key":"VlZc8LeUix"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Filter","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Jz5w3I4Szy"}],"identifier":"filter","label":"Filter","html_id":"filter","implicit":true,"key":"XPQVvuHnpA"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"We have to setup up a filter and define which data to obtain.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"utbqevsbwO"}],"key":"mnkH8hC0zH"}],"key":"e0Cr0yL7fD"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# Check if levelist is empty and remove it\nif filter_params.get(\"levelist\") == \"\":\n    del filter_params[\"levelist\"]\n\nif selected_entry[\"time\"] == \"Daily\":\n    del filter_params[\"time\"]\n\n    \nhdaFilters = {\n    key: {\"eq\": value}\n    for key, value in filter_params.items()\n}\n\n#print(hdaFilters)","visibility":"show","key":"NWSpK8Yi4h"},{"type":"output","id":"-WTQd3NXJ4fcLUDW3lqkM","data":[],"visibility":"show","key":"RugHYzid0B"}],"visibility":"show","key":"f2mvNIwHGH"},{"type":"block","kind":"notebook-content","data":{"tags":[]},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Make Data Request","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"gwBZ56j5B7"}],"identifier":"make-data-request","label":"Make Data Request","html_id":"make-data-request","implicit":true,"key":"bqHInbwxQj"}],"visibility":"show","key":"EpMOgCjjKp"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"#Sometimes requests to polytope get timeouts, it is then convenient define a retry strategy\nretry_strategy = Retry(\n    total=5,  # Total number of retries\n    status_forcelist=[500, 502, 503, 504],  # List of 5xx status codes to retry on\n    allowed_methods=[\"GET\",'POST'],  # Methods to retry\n    backoff_factor=1  # Wait time between retries (exponential backoff)\n)\n\n# Create an adapter with the retry strategy\nadapter = HTTPAdapter(max_retries=retry_strategy)\n\n# Create a session and mount the adapter\nsession = requests.Session()\nsession.mount(\"https://\", adapter)\n\nresponse = session.post(\"https://hda.data.destination-earth.eu/stac/search\", headers=auth_headers, json={\n \"collections\": [\"EO.ECMWF.DAT.DT_CLIMATE_ADAPTATION\"],\n    \"datetime\": datechoice,\n    \"query\": hdaFilters\n})\n\nif(response.status_code!= 200):\n    (print(response.text))\nresponse.raise_for_status()\n# Requests to EO.ECMWF.DAT.DT_CLIMATE always return a single item containing all the requested data\nproduct = response.json()[\"features\"][0]\nproduct[\"id\"]","visibility":"show","key":"RaREx92Dya"},{"type":"output","id":"uyqzPdT5b1Wh2eypzqrgH","data":[{"output_type":"execute_result","execution_count":20,"metadata":{},"data":{"text/plain":{"content":"'DT_CLIMATE_ADAPTATION_20280606_20280606_7d019c7832c598efe2ebdc08e5f6ec54e553b5d7'","content_type":"text/plain"}}}],"visibility":"show","key":"udhMTY78dh"}],"visibility":"show","key":"mkrHa3n3e4"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Submission worked ? Once our product found, we download the data.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"KPadYuu5S3"}],"identifier":"submission-worked-once-our-product-found-we-download-the-data","label":"Submission worked ? Once our product found, we download the data.","html_id":"submission-worked-once-our-product-found-we-download-the-data","implicit":true,"key":"wV5uT8SiX3"}],"key":"erkUuv4YvL"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"from IPython.display import JSON\n\n# DownloadLink is an asset representing the whole product\ndownload_url = product[\"assets\"][\"downloadLink\"][\"href\"]\nHTTP_SUCCESS_CODE = 200\nHTTP_ACCEPTED_CODE = 202\n\ndirect_download_url=''\n\nresponse = session.get(download_url, headers=auth_headers)\nif (response.status_code == HTTP_SUCCESS_CODE):\n    direct_download_url = product['assets']['downloadLink']['href']\nelif (response.status_code != HTTP_ACCEPTED_CODE):\n    print(response.text)\nprint(download_url)\nresponse.raise_for_status()\n    ","visibility":"show","key":"HcmN5u0hOZ"},{"type":"output","id":"mqe_ePEJ8jd_xUXNeqkyc","data":[{"name":"stdout","output_type":"stream","text":"https://hda.data.destination-earth.eu/stac/collections/EO.ECMWF.DAT.DT_CLIMATE_ADAPTATION/items/DT_CLIMATE_ADAPTATION_20280606_20280606_7d019c7832c598efe2ebdc08e5f6ec54e553b5d7/download?provider=dedt_lumi&_dc_qs=%257B%2522activity%2522%253A%2B%2522ScenarioMIP%2522%252C%2B%2522class%2522%253A%2B%2522d1%2522%252C%2B%2522dataset%2522%253A%2B%2522climate-dt%2522%252C%2B%2522date%2522%253A%2B%252220280606%252Fto%252F20280606%2522%252C%2B%2522experiment%2522%253A%2B%2522SSP3-7.0%2522%252C%2B%2522expver%2522%253A%2B%25220001%2522%252C%2B%2522generation%2522%253A%2B%25221%2522%252C%2B%2522levtype%2522%253A%2B%2522sfc%2522%252C%2B%2522model%2522%253A%2B%2522IFS-NEMO%2522%252C%2B%2522param%2522%253A%2B%2522167%2522%252C%2B%2522realization%2522%253A%2B%25221%2522%252C%2B%2522resolution%2522%253A%2B%2522high%2522%252C%2B%2522stream%2522%253A%2B%2522clte%2522%252C%2B%2522time%2522%253A%2B%25220000%2522%252C%2B%2522type%2522%253A%2B%2522fc%2522%257D\n"}],"visibility":"show","key":"EFyVcDHI3W"}],"visibility":"show","key":"fpEmLu6h48"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Wait until data is there","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"HA7nvszuWu"}],"identifier":"wait-until-data-is-there","label":"Wait until data is there","html_id":"wait-until-data-is-there","implicit":true,"key":"t66o062L6T"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"This data is not available at the moment. And we can see that our request is in ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"d5VxuuCNAQ"},{"type":"inlineCode","value":"queued","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"iJ0VbAHfv7"},{"type":"text","value":"status.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"RhaXu4bKwl"},{"type":"break","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"okARJjX8Yy"},{"type":"text","value":"We will now poll the API until the data is ready and then download it.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"kKCTxY6Qur"}],"key":"iY2Z2CVE1z"},{"type":"paragraph","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"strong","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Please note that the basic HDA quota allows a maximum of 4 requests per second. The following code limits polling to this quota.","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"EMWnCcs3yV"}],"key":"IimuVvRsGc"}],"key":"FigopobpzG"}],"key":"Y3eCv1EiI8"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"pip install --user ratelimit --quiet","visibility":"show","key":"C1B6A6C5U0"},{"type":"output","id":"QvGHeYPxYNCw2htIrGbm6","data":[{"name":"stdout","output_type":"stream","text":"Note: you may need to restart the kernel to use updated packages.\n"}],"visibility":"show","key":"dwP7tyoXXa"}],"visibility":"show","key":"Sq0Etce8hY"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"from tqdm import tqdm\nimport time\nimport re\nfrom ratelimit import limits, sleep_and_retry\n\n# Set limit: max 4 calls per 1 seconds\nCALLS = 4\nPERIOD = 1  # seconds\n\n@sleep_and_retry\n@limits(calls=CALLS, period=PERIOD)\ndef call_api(url,auth_headers):\n    response = requests.get(url, headers=auth_headers, stream=True)\n    return response\n\n# we poll as long as the data is not ready\nif direct_download_url=='':\n    while url := response.headers.get(\"Location\"):\n        print(f\"order status: {response.json()['status']}\")\n        response = call_api(url,auth_headers)\n\nif (response.status_code not in (HTTP_SUCCESS_CODE,HTTP_ACCEPTED_CODE)):\n     (print(response.text))\n\n# Check if Content-Disposition header is present\nif \"Content-Disposition\" not in response.headers:\n    print(response)\n    print(response.text)\n    raise Exception(\"Headers: \\n\"+str(response.headers)+\"\\nContent-Disposition header not found in response. Must be something wrong.\")\n        \nfilename = re.findall('filename=\\\"?(.+)\\\"?', response.headers[\"Content-Disposition\"])[0]\ntotal_size = int(response.headers.get(\"content-length\", 0))\n\nprint(f\"downloading {filename}\")\n\nwith tqdm(total=total_size, unit=\"B\", unit_scale=True) as progress_bar:\n    with open(filename, 'wb') as f:\n        for data in response.iter_content(1024):\n            progress_bar.update(len(data))\n            f.write(data)","visibility":"show","key":"g6Ixih8WoP"},{"type":"output","id":"nfWLJ6KNvMdWKSiUxeMdq","data":[{"name":"stdout","output_type":"stream","text":"order status: queued\ndownloading 0d68ccb8-6e25-409c-8e11-17e6f7823be0.grib\n"},{"name":"stderr","output_type":"stream","text":"100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 26.2M/26.2M [00:00<00:00, 47.7MB/s]\n"}],"visibility":"show","key":"wl8wbS01Yb"}],"visibility":"show","key":"YtrFBEscU6"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"EarthKit","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"En63TgYstb"}],"identifier":"earthkit","label":"EarthKit","html_id":"earthkit","implicit":true,"key":"MVuJDNYkPJ"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Lets plot the result file\n[EarthKit Documentation] ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"xCOmrMBzug"},{"type":"link","url":"https://earthkit-data.readthedocs.io/en/latest/index.html","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"https://â€‹earthkitâ€‹-dataâ€‹.readthedocsâ€‹.ioâ€‹/enâ€‹/latestâ€‹/indexâ€‹.html","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"hgTIzR9kDz"}],"urlSource":"https://earthkit-data.readthedocs.io/en/latest/index.html","key":"h8mofTOPOr"}],"key":"wDA79DjJOB"},{"type":"paragraph","position":{"start":{"line":6,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"This section requires that you have ","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"CcGJ4oHNHx"},{"type":"inlineCode","value":"ecCodes >= 2.35","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"Iq9J8jbePb"},{"type":"text","value":" installed on your system.","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"YeDGUb91CS"},{"type":"break","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"m8uXxLRp2c"},{"type":"text","value":"You can follow the installation procedure at ","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"uZ3O2VJeVI"},{"type":"link","url":"https://confluence.ecmwf.int/display/ECC/ecCodes+installation","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"https://â€‹confluenceâ€‹.ecmwfâ€‹.intâ€‹/displayâ€‹/ECCâ€‹/ecCodes+installation","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"TXw6JvzzeP"}],"urlSource":"https://confluence.ecmwf.int/display/ECC/ecCodes+installation","key":"q3Xyzs3x9A"}],"key":"dkDf243aca"}],"key":"JuMShosaxX"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"import earthkit.data\nimport earthkit.maps\nimport earthkit.regrid","visibility":"show","key":"IUR18VOPc3"},{"type":"output","id":"bznBTr4j7r-6a3e7a6bcz","data":[],"visibility":"show","key":"anDJJOFRQq"}],"visibility":"show","key":"k8KXC2FUfR"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"data = earthkit.data.from_source(\"file\", filename)\ndata.ls\nearthkit.maps.quickplot(data)\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nwarnings.simplefilter(action = \"ignore\", category = RuntimeWarning)","visibility":"show","key":"qAYn3TMOOp"},{"type":"output","id":"Ab_gU69ndNvFFaHzQEUuN","data":[{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"98bddafd9b4ad7eadd4bfc2342499770","path":"/98bddafd9b4ad7eadd4bfc2342499770.png"},"text/plain":{"content":"<Figure size 900x750 with 2 Axes>","content_type":"text/plain"}}}],"visibility":"show","key":"qTd390QvYX"}],"visibility":"show","key":"cpSF17LkQJ"}],"key":"EI2YYhJ4SA"},"references":{"cite":{"order":[],"data":{}}}}