{"version":2,"kind":"Notebook","sha256":"6d5d0d9d5682555f19a60400b57791b600e7aca16ad30abfc45b5eafc0e0404a","slug":"dedl-hook-data-harvest","location":"/production/HOOK/DEDL-Hook_data_harvest.ipynb","dependencies":[],"frontmatter":{"title":"Hook - Perform data harvesting","subtitle":"This Notebook demonstrates how to perform data harvesting with Hook.","tags":["Hook","Authentication","Token"],"copyright":"Â© 2024 EUMETSAT","authors":[{"id":"Author: Eumetsat","name":"Author: Eumetsat"}],"license":{"content":{"id":"MIT","url":"https://opensource.org/licenses/MIT","name":"MIT License","free":true,"osi":true}},"thumbnail":"/build/EUMETSAT-icon-8a0df7b841a1ceb16813505816925810.png","kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"numbering":{"title":{"offset":1}},"exports":[{"format":"ipynb","filename":"DEDL-Hook_data_harvest.ipynb","url":"/build/DEDL-Hook_data_harve-7392a79f09f05636c0fe5fd9320cb91f.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"div","style":{"margin":"6px 0"},"children":[{"type":"link","style":{"textDecoration":"none"},"url":"https://jupyter.central.data.destination-earth.eu/user-redirect/lab/tree/DestinE-DataLake-Lab/HOOK/DEDL-Hook_data_harvest.ipynb","children":[{"type":"span","class":"launch","children":[{"type":"text","value":"ðŸš€ Launch in JupyterHub","key":"j8JzHa8NXm"}],"key":"UniQnoepHq"}],"urlSource":"https://jupyter.central.data.destination-earth.eu/user-redirect/lab/tree/DestinE-DataLake-Lab/HOOK/DEDL-Hook_data_harvest.ipynb","key":"OlU6bR2KpB"}],"key":"R8ZYSRnX4B"}],"key":"LlIc4avrHa"},{"type":"block","kind":"notebook-content","data":{"slideshow":{"slide_type":"skip"},"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"The first step is to import the dependencies that allow the script to run","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"qhmVDV3gi3"}],"key":"SeavFLWroR"}],"visibility":"show","key":"axphRITnjX"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"import json\nfrom io import BytesIO\nfrom urllib.parse import urlencode\nimport getpass\nimport pycurl\nimport requests\nfrom IPython.display import JSON","visibility":"show","key":"PDD8TN95jC"},{"type":"output","id":"yP0S7A9NizJ52Yu37Jcbx","data":[],"visibility":"show","key":"Ol0p15TXVN"}],"visibility":"show","key":"A4H4skNto3"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"The following implement methods retrieve the token required to run the workflow","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ADzU3Yc1EK"}],"key":"f8UOrljN6H"}],"key":"VNQcaVLSUG"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"import requests\nfrom lxml import html\nfrom urllib.parse import parse_qs, urlparse\n\nIAM_URL = \"https://auth.destine.eu/\"\nCLIENT_ID = \"dedl-hook\"\nREALM = \"desp\"\nSERVICE_URL = \"https://odp.data.destination-earth.eu/odata/v1/\"\nTEST_RUN_ID = \"004\"\n\n\nclass DESPAuth:\n    def __init__(self, username, password):\n        self.username = username\n        self.password = password\n\n    def get_token(self):\n        with requests.Session() as s:\n\n            # Get the auth url\n            auth_url = html.fromstring(s.get(url=IAM_URL + \"/realms/\" + REALM + \"/protocol/openid-connect/auth\",\n                                     params = {\n                                            \"client_id\": CLIENT_ID,\n                                            \"redirect_uri\": SERVICE_URL,\n                                            \"scope\": \"openid\",\n                                            \"response_type\": \"code\"\n                                     }\n                                       ).content.decode()).forms[0].action\n            \n            # Login and get auth code\n            login = s.post(auth_url,\n                            data = {\n                                \"username\" : self.username,\n                                \"password\" : self.password,\n                            },\n                            allow_redirects=False\n            )\n\n\n            # We expect a 302, a 200 means we got sent back to the login page and there's probably an error message\n            if login.status_code == 200:\n                tree = html.fromstring(login.content)\n                error_message_element = tree.xpath('//span[@id=\"input-error\"]/text()')\n                error_message = error_message_element[0].strip() if error_message_element else 'Error message not found'\n                raise Exception(error_message)\n\n            if login.status_code != 302:\n                raise Exception(\"Login failed\")\n            \n\n            auth_code = parse_qs(urlparse(login.headers[\"Location\"]).query)['code'][0]\n\n            # Use the auth code to get the token\n            response = requests.post(IAM_URL + \"/realms/\" + REALM + \"/protocol/openid-connect/token\",\n                    data = {\n                        \"client_id\" : CLIENT_ID,\n                        \"redirect_uri\" : SERVICE_URL,\n                        \"code\" : auth_code,\n                        \"grant_type\" : \"authorization_code\",\n                        \"scope\" : \"\"\n                    }\n                )\n            \n            if response.status_code != 200:\n                raise Exception(\"Failed to get token\")\n\n            token = response.json()['access_token']\n        \n\n            return token\n\nclass DEDLAuth:\n    def __init__(self, desp_access_token):\n        self.desp_access_token = desp_access_token\n\n    def get_token(self):\n        DEDL_TOKEN_URL='https://identity.data.destination-earth.eu/auth/realms/dedl/protocol/openid-connect/token'\n        DEDL_CLIENT_ID='hda-public'\n        AUDIENCE='hda-public'\n        \n        data = { \n            \"grant_type\": \"urn:ietf:params:oauth:grant-type:token-exchange\", \n            \"subject_token\": self.desp_access_token,\n            \"subject_issuer\": \"desp-oidc\",\n            \"subject_token_type\": \"urn:ietf:params:oauth:token-type:access_token\",\n            \"client_id\": DEDL_CLIENT_ID,\n            \"audience\": AUDIENCE\n        }\n\n        response = requests.post(DEDL_TOKEN_URL, data=data)\n        \n        print(\"Response code:\", response.status_code)\n\n        if response.status_code == 200: \n            dedl_token = response.json()[\"access_token\"]\n            return dedl_token\n        else: \n            print(response.json())\n            print(\"Error obtaining DEDL access token\")\n            \nclass AuthHandler:\n    def __init__(self, username, password):\n        self.username = username\n        self.password = password\n        self.desp_access_token = None\n        self.dedl_access_token = None\n    \n    def get_token(self):\n        # Get DESP auth token\n        desp_auth = DESPAuth(self.username, self.password)\n        self.desp_access_token = desp_auth.get_token()\n        \n        # Get DEDL auth token\n        dedl_auth = DEDLAuth(self.desp_access_token)\n        self.dedl_access_token = dedl_auth.get_token()\n        \n        return self.dedl_access_token","visibility":"show","key":"Sq0IdjLbIa"},{"type":"output","id":"0kcmGx9V07DL33YB5z9Js","data":[],"visibility":"show","key":"b2oFKVhRcT"}],"visibility":"show","key":"FB25I7Rbsk"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Users must provide their credentials to the DESP platform to retrieve an access token","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"I5aM3Zi3iA"}],"key":"SUJQOJG75x"}],"key":"Q2l8oEcQtd"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"print('Provide credentials for the DESP')\ndesp_username = input('DESP Username: ')\ndesp_password = getpass.getpass(prompt='DESP Password: ', stream=None) \n\ntoken = AuthHandler(desp_username, desp_password)          \naccess_token = token.get_token()\napi_headers = {'Authorization': 'Bearer ' + access_token}","key":"OFd6LtGDSX"},{"type":"output","id":"u_KAXSTO6QMloVZrDIa3y","data":[],"key":"fyYZEtaaOf"}],"key":"R9G2DFKrnX"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"We can review an accepted parameters for workflows","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"slv9B4dfM0"}],"key":"Lr7YlwrbJl"}],"key":"PWS0iKW9wt"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"workflow_options_url = SERVICE_URL + \"Workflows?$filter=Name+eq+\\'data-harvest\\'&$expand=WorkflowOptions\"\nresult = requests.get(workflow_options_url, headers=api_headers).json()\navailable_workflows = json.dumps(result,indent=2)\nJSON(result)","visibility":"show","key":"zOycHWK2xz"},{"type":"output","id":"e8XkqE00DP6VWGQXfUG99","data":[],"visibility":"show","key":"DHJn5PkMV2"}],"visibility":"show","key":"j5vGKewuip"},{"type":"block","kind":"notebook-content","data":{"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Prepare Worflow Options for data-harvest workflow","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"jqtxz0AfP2"}],"key":"EP3VrXm6pI"}],"visibility":"show","key":"ik8yZaVhnV"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"workflow = \"data-harvest\"\nidentifier_list = [\"S2A_MSIL2A_20240501T095031_N0510_R079_T33UXT_20240501T135852.SAFE\"]\norder_body_custom_bucket = {\n        \"Name\": \"DEDL - Hook introduction support \" + workflow + \" - \" + TEST_RUN_ID,\n        \"WorkflowName\": workflow,\n        \"IdentifierList\": identifier_list,\n        \"WorkflowOptions\":[\n            {\"Name\": \"output_storage\", \"Value\": \"TEMPORARY\"},\n            {\"Name\": \"source_type\", \"Value\": \"DESP\"},\n            {\"Name\": \"desp_source_collection\", \"Value\": \"EO.ESA.DAT.SENTINEL-2.MSI.L2A\"},\n            {\"Name\": \"desp_source_username\", \"Value\": desp_username},\n            {\"Name\": \"desp_source_password\", \"Value\": desp_password},\n            \n        ]\n    }","key":"pSUmdQe867"},{"type":"output","id":"ObrMWerN1dskYefAfRjZc","data":[],"key":"fIAY0nveGm"}],"key":"uX1OJb0j5m"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Make a request to run the workflow with the parameters just set","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Oso6EWSGfR"}],"key":"WCS2FPoG30"}],"key":"f3tRXJ0NYu"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"request = requests.post(\n    SERVICE_URL + \"BatchOrder/OData.CSC.Order\",\n    json.dumps(order_body_custom_bucket),\n    headers=api_headers\n)\nresp = request.json()\nprint(request.status_code)\norder_id = resp['value']['Id']\nJSON(resp, indent=2)","visibility":"show","key":"xQMg66VeAh"},{"type":"output","id":"2FOHE8mq9Q1uG68o3ayIk","data":[],"visibility":"show","key":"j1lY51cbes"}],"visibility":"show","key":"W9y8Vrrjid"},{"type":"block","kind":"notebook-content","data":{"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Review information about the products processed in the order","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Tm3pA7GftY"}],"key":"f3JJBoqW80"}],"visibility":"show","key":"be5gRfL6f3"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"batch_order_items = requests.get(SERVICE_URL + 'BatchOrder(' + str(order_id) + ')/Products', headers=api_headers).json()\nJSON(batch_order_items, indent=2)","key":"HTSR7EdiO6"},{"type":"output","id":"VLe3mURkKyAZ7Hct7uLgP","data":[],"key":"zIZ96N5m2E"}],"key":"lLtfVftWn3"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Review processed product status","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"yTWUy9QjxR"}],"key":"BhMZnGY3EX"}],"key":"Qcp5jdeDj7"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"batch_order_items['value'][0]['Status']","visibility":"show","key":"UOmmY8s5Jy"},{"type":"output","id":"USmTOMPdqkKdty1tU1zg_","data":[],"visibility":"show","key":"ISm1Qai9dL"}],"visibility":"show","key":"XjMRH6dcDT"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Review processed product DownloadLink","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"rl7hCSFrHy"}],"key":"XTy1dCTnZE"}],"key":"mkGvEp1OAc"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"batch_order_items['value'][0]['DownloadLink']","visibility":"show","key":"reXJBVZTxf"},{"type":"output","id":"iIcH3b2xKzeLq0PTn_Pxn","data":[],"visibility":"show","key":"PzGrIx7yQO"}],"visibility":"show","key":"Z80Fk1pOH5"}],"key":"BTMckFfUsw"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Access to Hook services","url":"/dedl-hook-access","group":"DEDL Notebook Gallery"},"next":{"title":"Hook Tutorial - Data Harvest","url":"/tutorial","group":"DEDL Notebook Gallery"}}},"domain":"http://localhost:3001"}